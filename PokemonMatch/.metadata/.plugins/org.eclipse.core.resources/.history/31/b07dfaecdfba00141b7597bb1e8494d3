import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.TargetDataLine;

public class PokemonSound implements Runnable {

	public ByteArrayOutputStream out;

	public void performFFT() throws IOException {
		if(out == null)
			return;
		System.out.println("Done");
		byte audio[] = out.toByteArray();

		final int totalSize = audio.length;

		int amountPossible = totalSize / Harvester.CHUNK_SIZE;

		// When turning into frequency domain we'll need complex numbers:
		Complex[][] results = new Complex[amountPossible][];

		// For all the chunks:
		for (int times = 0; times < amountPossible; times++) {
			Complex[] complex = new Complex[Harvester.CHUNK_SIZE];
			for (int i = 0; i < Harvester.CHUNK_SIZE; i++) {
				// Put the time domain data into a complex number with imaginary
				// part as 0:
				complex[i] = new Complex(audio[(times * Harvester.CHUNK_SIZE)
						+ i], 0);
			}
			// Perform FFT analysis on the chunk:
			results[times] = FFT.fft(complex);
		}
		// Done!
		File file = new File("C:/Users/John/Desktop/pokemonCries/cry.txt");
		FileWriter fw = new FileWriter(file,false);
		for(int i =0; i < results.length; i++){
			for(int j =0;j<results[0].length;j++){
				fw.append(results[i][j] +"\t");
			}
			fw.append("\n");
		}
		fw.close();
	}
	
	public static final int[] RANGE = new int[] {40,80,120,180, Harvester.UPPER_LIMIT+1};

	//Find out in which range
	public static int getIndex(int freq) {
	    int i = 0;
	    while(RANGE[i] < freq) i++;
	        return i;
	    }
	

	public static void main(String[] args) throws InterruptedException, IOException {
		PokemonSound ps = new PokemonSound();
		Thread t = new Thread(ps);
		t.start();
	}

	public static boolean running = false;

	public AudioFormat getFormat() {
		return new AudioFormat(44100.0F, 16, 1, true, false);
	}

	@Override
	public void run() {

		final AudioFormat format = getFormat(); // Fill AudioFormat with the
												// wanted settings
		DataLine.Info info = new DataLine.Info(TargetDataLine.class, format);
		TargetDataLine line;
		try {
			line = (TargetDataLine) AudioSystem.getLine(info);
			line.open(format);
			line.start();

			byte buffer[] = new byte[80];
			// In another thread I start:

			out = new ByteArrayOutputStream();
			running = true;

			try {
				while (running) {
					int count = line.read(buffer, 0, buffer.length);
					if (count > 0) {
						out.write(buffer, 0, count);
						//System.out.println("test");
					}
				}
				out.close();
				for (byte n : buffer) {
					System.out.println(n);
				}
			} catch (IOException e) {
				System.err.println("I/O problems: " + e);
				System.exit(-1);
			}
		} catch (LineUnavailableException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

	}

}
