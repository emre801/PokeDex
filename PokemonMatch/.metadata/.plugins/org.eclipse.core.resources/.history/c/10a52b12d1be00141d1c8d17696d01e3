package com.johnerdo.imageCompare;

import static java.nio.file.StandardCopyOption.*;

import java.util.HashMap;
import java.util.LinkedList;

import org.johnerdo.globalInfo.PokemonList;
import org.opencv.core.Core;
import org.opencv.core.Core.MinMaxLocResult;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.MatOfKeyPoint;
import org.opencv.core.Point;
import org.opencv.core.Rect;
import org.opencv.features2d.FeatureDetector;
import org.opencv.highgui.Highgui;
import org.opencv.imgproc.Imgproc;


public class MatchingMethod {

	public static Mat screenRegion(String screenshot, String output, Rect rect) {
		Mat screen = Highgui.imread(screenshot);
		Mat slot1 = screen.submat(rect);
		Highgui.imwrite(output, slot1);
		return slot1;
	}

	public static LinkedList<Mat> getScreenInfo() {
		LinkedList<Mat> results = new LinkedList<Mat>();
		int x = 3; int y = 0;
		int box = 30;
		Rect rect1 = new Rect(140 + x, 40 + y, box, box);
		String screenShot = "C:/Users/John/Desktop/ScreenInfo/ScreenShot/Screenshot.png";
		results.add(screenRegion(screenShot,
				"C:/Users/John/Desktop/ScreenInfo/Results/slot1.png", rect1));
		Rect rect2 = new Rect(210 + x, 40 + y, box, box);
		results.add(screenRegion(screenShot,
				"C:/Users/John/Desktop/ScreenInfo/Results/slot2.png", rect2));
		Rect rect3 = new Rect(140 + x, 100 + y, box, box);
		results.add(screenRegion(screenShot,
				"C:/Users/John/Desktop/ScreenInfo/Results/slot3.png", rect3));
		Rect rect4 = new Rect(210 + x, 100 + y, box, box);
		results.add(screenRegion(screenShot,
				"C:/Users/John/Desktop/ScreenInfo/Results/slot4.png", rect4));
		Rect rect5 = new Rect(140 + x, 160 + y, box, box);
		results.add(screenRegion(screenShot,
				"C:/Users/John/Desktop/ScreenInfo/Results/slot5.png", rect5));
		Rect rect6 = new Rect(210 + x, 160 + y, box, box);
		results.add(screenRegion(screenShot,
				"C:/Users/John/Desktop/ScreenInfo/Results/slot6.png", rect6));

		return results;
	}
	
	

	// 27
	public static LinkedList<Mat> getImages() {
		int count = 1;
		LinkedList<Mat> pokemonMats = new LinkedList<Mat>();
		for (int j = 0; j < 28; j++) {
			for (int i = -1; i < 25; i++) {
				int x = 47 + (i * 38);
				int y = 94 + (j * 38);
				Rect rect = new Rect(x, y, 32, 32);
				//if(j ==27 && i<=3 && count < 719)
					//continue;
				Mat pok = screenRegion(
						"C:/Users/John/Desktop/PokemonInfo/PokemonSprites.png",
						"C:/Users/John/Desktop/PokemonInfo/Pokemon/pok" + count
								+ ".png", rect);
				pokemonMats.add(pok);
				count++;
			}
		}
		return pokemonMats;
	}
	
	public static HashMap<Rect,Integer>  getImageRect() {
		int count = 1;
		HashMap<Rect,Integer> pokemonMats = new HashMap<Rect,Integer>();
		for (int j = 0; j < 28; j++) {
			for (int i = -1; i < 25; i++) {
				int x = 47 + (i * 38);
				int y = 94 + (j * 38);
				Rect rect = new Rect(x, y, 32, 32);
				//if(j ==27 && i<=3 && count < 719)
					//continue;
				pokemonMats.put(rect,count);
				count++;
			}
		}
		return pokemonMats;
	}
	
	
	public static MatOfKeyPoint keyFeature(Mat img, int num){
		FeatureDetector myFeatures = FeatureDetector.create(FeatureDetector.FAST);
		Mat outputImage = new Mat();
		MatOfKeyPoint keypoints = new MatOfKeyPoint();
		myFeatures.detect(img, keypoints);
		//Features2d.drawKeypoints(img, keypoints, outputImage);
		return keypoints;
		//Highgui.imwrite("C:/Users/John/Desktop/ScreenInfo/keyPoints"+ num +".png", outputImage);
	}
	
	
	public static void match(Mat img, Mat templ,
			int match_method, int pokeNumber) {
		
		//System.out.println("\nRunning Template Matching");

		FeatureDetector cvFeatureDetector;
		cvFeatureDetector = FeatureDetector.create(FeatureDetector.GFTT);
		
		MatOfKeyPoint keyPoint1;
		keyPoint1 = new MatOfKeyPoint();
		cvFeatureDetector.detect(img, keyPoint1);
		
		MatOfKeyPoint keyPoint2;
		keyPoint2 = new MatOfKeyPoint();
		cvFeatureDetector.detect(templ, keyPoint2);
		
		
		//FeatureDetector detector = FeatureDetector.create(FeatureDetector.ORB);

		// / Do the Matching and Normalize
		Imgproc.matchTemplate(img, templ, templ, match_method);
		Core.normalize(templ, templ, 0, 1, Core.NORM_MINMAX, -1, new Mat());

		// / Localizing the best match with minMaxLoc
		MinMaxLocResult mmr = Core.minMaxLoc(templ);

		System.out.println(pokeNumber);
		System.out.println(Math.abs(mmr.maxVal));
		System.out.println(Math.abs(mmr.minVal));
		System.out.println();
		
		

	}
	
	public static LinkedList<String> getPokemonNamesOnScreen(){
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
		LinkedList<Mat> pokemons = getScreenInfo();
		HashMap<Rect,Integer> squares = getImageRect();
		LinkedList<String> pokemonName = new LinkedList<String>();
		Mat img = Highgui.imread("C:/Users/John/Desktop/PokemonInfo/PokemonSprites.png");
		//int count = 1;
		for(Mat ok:pokemons){
			//revenge(img, ok,"C:/Users/John/Desktop/PokemonInfo/Testing" + count + ".png",Imgproc.TM_SQDIFF);
			Point midPoint = findMidPoint(img,ok, Imgproc.TM_SQDIFF);
			for(Rect rect:squares.keySet()){
				if(rect.contains(midPoint)){
					//System.out.println("PokemonNumber = " + squares.get(rect));
					String pokemon = PokemonList.pokemonNames[squares.get(rect) -1];
					pokemonName.add(pokemon);
					//System.out.println("Name  = " + PokemonList.pokemonNames[squares.get(rect) -1]);
				}
			}
			//count++;
		}
		return pokemonName;
	}
	public static void replaceFile(String source, String target){
		Files.copy(source, target, REPLACE_EXISTING);
	}

	public static void revenge(Mat img, Mat templ, String outFile,
			int match_method) {

		// / Create the result matrix
		int result_cols = img.cols() - templ.cols() + 1;
		int result_rows = img.rows() - templ.rows() + 1;
		//System.out.println(result_cols + " " + result_rows);
		Mat result = new Mat(result_rows, result_cols, CvType.CV_32FC1);

		// / Do the Matching and Normalize
		Imgproc.matchTemplate(img, templ, result, match_method);
		//Core.normalize(result, result, 0, 1, Core.NORM_MINMAX, -1, new Mat());

		// / Localizing the best match with minMaxLoc
		MinMaxLocResult mmr = Core.minMaxLoc(result);

		Point matchLoc;
		if (match_method == Imgproc.TM_SQDIFF
				|| match_method == Imgproc.TM_SQDIFF_NORMED) {
			matchLoc = mmr.minLoc;
		} else {
			matchLoc = mmr.maxLoc;
		}

		// Core.rectangle(img, matchLoc, new Point(matchLoc.x + templ.cols(),
		// matchLoc.y + templ.rows()), new Scalar(0, 255, 0));
		Rect rect = new Rect(matchLoc, new Point(matchLoc.x + templ.cols(),
				matchLoc.y + templ.rows()));
		
		//System.out.print(rect);
		int midX = rect.x + rect.width/2;
		int midY = rect.y + rect.height/2;
		Point midPoint = new Point(midX,midY);
		System.out.println(midPoint);
		Mat out = img.submat(rect);
		System.out.println("Writing " + outFile);
		//Highgui.imwrite(outFile, out);

	}
	
	public static Point findMidPoint(Mat img, Mat templ,
			int match_method) {
		// / Create the result matrix
		int result_cols = img.cols() - templ.cols() + 1;
		int result_rows = img.rows() - templ.rows() + 1;
		Mat result = new Mat(result_rows, result_cols, CvType.CV_32FC1);

		// / Do the Matching and Normalize
		Imgproc.matchTemplate(img, templ, result, match_method);

		// / Localizing the best match with minMaxLoc
		MinMaxLocResult mmr = Core.minMaxLoc(result);

		Point matchLoc;
		if (match_method == Imgproc.TM_SQDIFF
				|| match_method == Imgproc.TM_SQDIFF_NORMED) {
			matchLoc = mmr.minLoc;
		} else {
			matchLoc = mmr.maxLoc;
		}
		Rect rect = new Rect(matchLoc, new Point(matchLoc.x + templ.cols(),
				matchLoc.y + templ.rows()));
		int midX = rect.x + rect.width/2;
		int midY = rect.y + rect.height/2;
		Point midPoint = new Point(midX,midY);
		return midPoint;

	}
	
	public static void derp(String inFile, String templateFile, String outFile,
			int match_method) {
		System.out.println("\nRunning Template Matching");
	
		
		
		//Features2d.drawMatches(img1, keypoints1, img2, keypoints2, matches1to2, outImg, matchColor, singlePointColor, matchesMask, flags)
		
		Mat img = Highgui.imread(inFile);
		Mat templ = Highgui.imread(templateFile);

		// / Create the result matrix
		int result_cols = img.cols() - templ.cols() + 1;
		int result_rows = img.rows() - templ.rows() + 1;
		Mat result = new Mat(result_rows, result_cols, CvType.CV_32FC1);

		// / Do the Matching and Normalize
		Imgproc.matchTemplate(img, templ, result, match_method);
		//Core.normalize(result, result, 0, 1, Core.NORM_MINMAX, -1, new Mat());

		// / Localizing the best match with minMaxLoc
		MinMaxLocResult mmr = Core.minMaxLoc(result);

		Point matchLoc;
		if (match_method == Imgproc.TM_SQDIFF
				|| match_method == Imgproc.TM_SQDIFF_NORMED) {
			matchLoc = mmr.minLoc;
		} else {
			matchLoc = mmr.maxLoc;
		}

		// Core.rectangle(img, matchLoc, new Point(matchLoc.x + templ.cols(),
		// matchLoc.y + templ.rows()), new Scalar(0, 255, 0));
		Rect rect = new Rect(matchLoc, new Point(matchLoc.x + templ.cols(),
				matchLoc.y + templ.rows()));

		System.out.println(rect);
		Mat out = img.submat(rect);
		System.out.println("Writing " + outFile);
		Highgui.imwrite(outFile, out);

	}
	
	public static void getPokemonOnScreen(){
		LinkedList<Mat> pokemonMats = getImages();
		LinkedList<Mat> pokemonOnScreen = getScreenInfo();
		int pokeCount = 1;
		Mat slot1 = pokemonOnScreen.get(0);
		for(Mat pokemonMat:pokemonMats){
			match(slot1,pokemonMat,Imgproc.TM_SQDIFF, pokeCount++);
		}
	}

	public static void main(String[] args) {
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
		
		//LinkedList<Mat> info = getScreenInfo();
		//keyFeature(info.get(0), 0);
		//keyFeature(info.get(1), 1);
		//getPokemonOnScreen();
		//getImages();
		LinkedList<String> pokemonNames = getPokemonNamesOnScreen();
		int count=0;
		for(String name: pokemonNames){
			System.out.print(name + "\t\t");
			count++;
			if(count%2==0)
				System.out.println("\n");
		}
		//getScreenInfo();
		// derp("C:/Users/John/Desktop/PokemonSprites.png",
		// "C:/Users/John/Desktop/ivy.png",
		// "C:/Users/John/Desktop/outputImage.png", Imgproc.TM_CCOEFF);
		// new MatchingMethod().derp("C:/Users/John/Desktop/MetagrossBig.png",
		// "C:/Users/John/Desktop/Gengar.png",
		// "C:/Users/John/Desktop/outputImage.png", Imgproc.TM_SQDIFF );
		// new MatchingMethod().derp("C:/Users/John/Desktop/MetagrossBig.png",
		// "C:/Users/John/Desktop/Dialga.png",
		// "C:/Users/John/Desktop/outputImage.png", Imgproc.TM_SQDIFF_NORMED );

	}
}
